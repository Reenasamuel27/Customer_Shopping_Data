# -*- coding: utf-8 -*-
"""customer_shopping_data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E8jFE5UozP7gHTomx0sQufdiHCtweAGj
"""

from google.colab import files
uploaded = files.upload()  # This will prompt you to upload a file

# Commented out IPython magic to ensure Python compatibility.
import sqlite3  # For database operations
import pandas as pd  # For data manipulation
import matplotlib.pyplot as plt  # For data visualization

# Enable inline plots in Colab
# %matplotlib inline

 # Load sales data from CSV
df = pd.read_csv("/content/customer_shopping_data.csv")

# Add a Revenue column
df["Revenue"] = df["quantity"] * df["price"]

# Display DataFrame
df.head()

# Connect to SQLite (creates a database file)
conn = sqlite3.connect("sales.db")
cursor = conn.cursor()

# Create a sales table
cursor.execute('''
    CREATE TABLE IF NOT EXISTS Coustomer_Sales (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        date TEXT,
        product TEXT,
        quantity INTEGER,
        price REAL
    )
''')

# Insert sales data into the table
df.to_sql("Coustomer_Sales", conn, if_exists="replace", index=False)

# Commit and close connection
conn.commit()

# Query total sales per category
query = "SELECT category, SUM(quantity * price) AS total_sales FROM Coustomer_Sales GROUP BY category"
df_sales = pd.read_sql(query, conn)

# Display result
df_sales

# Connect to the database (if not already connected)
import sqlite3
conn = sqlite3.connect("sales.db")
cursor = conn.cursor()

# Execute your SQL queries

# Query total quantity number of sales per category
query1 = "SELECT category, SUM(quantity) AS total_quantity FROM Coustomer_Sales GROUP BY category"
df_sales = pd.read_sql(query1, conn)
print(df_sales)  # Print the results

# Query total sales per payment_method
query2 = "SELECT payment_method, SUM(quantity * price) AS payment_method_sales FROM Coustomer_Sales GROUP BY payment_method"
payment_method = pd.read_sql(query2, conn)
print(payment_method)  # Print the results

# Query total sales per shoppin_mall
query3 = "SELECT shopping_mall, SUM(quantity * price) AS shoppin_mall_sales FROM Coustomer_Sales GROUP BY shopping_mall"
shoppin_mall = pd.read_sql(query3, conn)
print(shoppin_mall)  # Print the results

# Query total sales per invoice_date
query4 = "SELECT invoice_date, SUM(quantity * price) AS daily_revenue FROM Coustomer_Sales GROUP BY invoice_date ORDER BY invoice_date ASC"
invoice_date = pd.read_sql(query4, conn)
print(invoice_date)  # Print the results

# Query total quantity number cosmetics category per gender
query5 = "SELECT category,gender, SUM(quantity * price) AS total_cosmetics_quantity FROM Coustomer_Sales WHERE category ='Cosmetics' GROUP BY gender"
cosmetics_gender = pd.read_sql(query5, conn)
print(cosmetics_gender)  # Print the results


# Query highest number of toys sales per shopping_mall
query6 = "SELECT category,shopping_mall, AVG(quantity * price) AS Highest_toys_sales FROM Coustomer_Sales WHERE category ='Toys' GROUP BY shopping_mall ORDER BY shopping_mall DESC LIMIT 2 "
toys_sales = pd.read_sql(query6, conn)
print(toys_sales)  # Print the results

# Close the connection (optional if you're done with the database)
conn.close()

with open("queries.sql", "w") as file: # Removed extra indentation
    file.write(query1 + "\n")
    file.write(query2 + "\n")
    file.write(query3 + "\n")
    file.write(query4 + "\n")
    file.write(query5 + "\n")
    file.write(query6 + "\n")

files.download("queries.sql") # Removed extra indentation

import sqlite3
import pandas as pd  # For data manipulation
import matplotlib.pyplot as plt  # For data visualization

# Re-establish connection to the database
conn = sqlite3.connect("sales.db")  # Reconnect to the database

# Fetch data with invoice_date and daily_revenue
query = "SELECT invoice_date, SUM(quantity * price) AS daily_revenue FROM Coustomer_Sales GROUP BY invoice_date ORDER BY invoice_date ASC"
df_sales = pd.read_sql(query, conn)

# Extract year from invoice_date
# Specify the correct date format (day/month/year)
df_sales['year'] = pd.to_datetime(df_sales['invoice_date'], format='%d/%m/%Y').dt.year

# Group by year sum of revenue
grouped_df = df_sales.groupby('year')['daily_revenue'].sum() # Changed df to df_sales and Revenue to daily_revenue
yearly_sales_percentage = grouped_df / grouped_df.sum() * 100
print(yearly_sales_percentage)

# Plot sales trend
plt.figure(figsize=(8, 5))

# Plot the data as line
plt.plot(yearly_sales_percentage.index, yearly_sales_percentage.values, marker='o', linestyle='-', color='blue', label="category_revenue")
for index, value in enumerate(yearly_sales_percentage.values):#index is a position of an item list like 0,1,2,3
    plt.text(yearly_sales_percentage.index[index], value, f"{value:.1f}%" , ha='center', va='bottom',fontsize=10) #f"{value:.1f}%" mention the float value after the point value

# Show the data lable of category values
plt.xlabel("Year")
plt.ylabel("Revenue")
plt.title("Yearly Sales Trend")
plt.xticks(yearly_sales_percentage.index) # Use grouped_df.index for x-axis ticks
plt.legend()
plt.show()

import sqlite3
import pandas as pd  # For data manipulation
import matplotlib.pyplot as plt  # For data visualization

# Re-establish connection to the database
conn = sqlite3.connect("sales.db")  # Reconnect to the database

query1 = "SELECT category, SUM(quantity) AS total_quantity FROM Coustomer_Sales GROUP BY category"
df_sales = pd.read_sql(query1, conn)

# Plot sales trend
plt.figure(figsize=(8,5))
plt.bar(df_sales["category"], df_sales["total_quantity"], color='blue', label="category_revenue")

# Show the data lable of category values
for index, value in enumerate(df_sales["total_quantity"]):#index is a position of an item list like 0,1,2,3
    plt.text(index,value, str(value), ha='center', va='bottom' ,fontsize=10)

# Plot the data as line
plt.xlabel("Category")
plt.ylabel("Revenue")
plt.title("Category Wise Sales")
plt.xticks(rotation=45)
plt.legend()
plt.show()

# Close the connection when done
conn.close() # Close the connection after using it

import sqlite3
import pandas as pd  # For data manipulation
import matplotlib.pyplot as plt  # For data visualization

# Re-establish connection to the database
conn = sqlite3.connect("sales.db")  # Reconnect to the database

# Query total sales per payment_method
query2 = "SELECT payment_method, SUM(quantity * price) AS payment_method_sales FROM Coustomer_Sales GROUP BY payment_method"
payment_method = pd.read_sql(query2, conn)


# Plot sales trend
plt.figure(figsize=(5,5))
plt.pie(payment_method["payment_method_sales"], labels=payment_method["payment_method"], autopct='%1.2f%%', startangle=90 )#autopct='%1.1f%% display the % value and floating point,#startangle=90 rotate the chart for better visulization
plt.legend(payment_method["payment_method"], loc="upper right", bbox_to_anchor=(1.5, 1))# Adjust the legend data in better position bbox_to_anchor=(1.5, 1)fixed the excat position
plt.title("Payment Wise Overall Sales")
plt.xticks(rotation=45)
plt.show()

# Close the connection when done
conn.close() # Close the connection after using it